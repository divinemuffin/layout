// @source http://smacss.com/book/type-module
//
// Module Rules     (SMACSS)
//
// A Module is a more discrete component of the page. It is your navigation bars 
// and your carousels and your dialogs and your widgets and so on. This is the 
// meat of the page. Modules sit inside Layout components. Modules can sometimes 
// sit within other Modules, too. Each Module should be designed to exist as a 
// standalone component. In doing so, the page will be more flexible. If done right, 
// Modules can easily be moved to different parts of the layout without breaking.

// Module – модули – это повторно используемые части дизайна, как в лего. 
// Например, меню, диалоговые окна, поисковой блок и т.д.

// Modules rules — стили модулей, то есть блоков, которые могут использоваться 
// несколько раз на одной странице. Для классов модулей не рекомендуется использовать 
// id и селекторы тэгов (для многократного использования и независимости от контекста 
// соответственно).

// @Note
// Usually I add prefives to casses, but modules are most common unit so I just use their
// names without any prefix;

// General Modules

%container {
    display: block;
}
%container-inline {
    display: inline-flex;
    justify-content: space-between;
    align-items: center;
}
%container-list > * {
    display: list-item;
}
%container-flex {
    display: flex;
}
%flex-justify {
    @extend %container-flex;
    justify-content: space-between;
}
%flex-justify-align {
    @extend %container-flex;
    @extend %flex-justify;
    align-items: center;
    flex-wrap: wrap;
}
%flex-center {
    @extend %container-flex;
    justify-content: center;
    flex-wrap: wrap;
}
%flex-start {
    @extend %container-flex;
    justify-content: start;
    flex-wrap: wrap;
}
.container-980 {
    @extend %flex-justify;
    max-width: 980px;
    margin: 0 auto;
    padding: $pad-xsmall-x;
}
.menu {
    list-style: none;
}

// Layout Modules with Elements

@import 'popup';
@import 'header';
@import 'slider';
@import 'main';
@import 'footer';